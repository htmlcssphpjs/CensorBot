# -*- coding: utf-8 -*-

#import telebot

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor

import re
import datetime
import string
import time
import json
import requests

bot_token = '<token>'
#bot = telebot.TeleBot(bot_token)
bot = Bot(token=bot_token)
dp = Dispatcher(bot)

GROUP_ID = -329119522  # ID –º–æ–µ–π –≥—Ä—É–ø–ø—ã

# —Å—á–∏—Ç–∞–µ–º –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
allwords = 161
matwords = 5
filescan = 15

@dp.message_handler(commands=['help', 'start'])
async def send_welcome(message: types.Message):
    await bot.send_chat_action(message.chat.id, 'typing')
    time.sleep(1)
    await bot.send_message(message.chat.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —É–¥–∞–ª—è—Ç—å –º–∞—Ç—ã –∏–∑ —á–∞—Ç–∞, '
        '–µ—Å–ª–∏ –≤—ã –∑–∞–º–µ—Ç–∏–ª–∏ —á—Ç–æ –∫–∞–∫–æ–π - —Ç–æ –º–∞—Ç –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —è –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å,'
        '–ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ —á–∞—Ç, –∑–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∏ –≤—ã–¥–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!')

@dp.message_handler(commands=['info', 'me'])
async def info(message: types.Message):
    await bot.send_chat_action(message.chat.id, 'typing')
    time.sleep(1)
    await bot.send_message(message.chat.id, '–ù—É —Ä–∞–∑ —Å–ø—Ä–æ—Å–∏–ª, —Ç–æ –≤ –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥—è—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–π, '
        '—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏ –µ—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Ç, —Ç–æ —è –µ–≥–æ —É–¥–∞–ª—è—é, '
        '–Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —è –ø—Ä–∏—Å—ã–ª–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–Ω–æ–µ –≤–∞—à–∏–º –∏–º–µ–Ω–µ–º, –∞ –≤–º–µ—Å—Ç–æ –º–∞—Ç–æ–≤ —Ç—Ä–∏ —Ç–æ—á–∫–∏,'
        '–∏–∑ —ç—Ç–æ–≥–æ —è –≤–µ–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!'
        '–¢–∞–∫ –∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—ã–ª–∞—è –ø—Ä–æ –Ω–∏—Ö —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –≤–∏—Ä—É—Å—ã –¥–ª—è –≤–∞—à–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!')

@dp.message_handler(commands=['static', 'info'])
async def statistic(message: types.Message):
    await bot.send_chat_action(message.chat.id, 'typing')
    time.sleep(1)
    await bot.send_message(
        message.chat.id, '<b>–í—Å–µ–≥–æ —Å–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ:</b> <code>' + str(allwords) +
        '</code>\n<b>–°–ª–æ–≤ —Å –º–∞—Ç–∞–º–∏:</b> <code>' + str(matwords) +
        '</code>\n<b>–§–∞–π–ª–æ–≤ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ:</b> <code>' + str(filescan) + '</code>', parse_mode='html')

@dp.message_handler(commands=['rules'])
async def rules(message: types.Message):
    await bot.send_message(
        message.chat.id, '–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞: \n'
        '<b> ¬∑ </b>–ù–µ –æ—Å–∫–æ—Ä–±–ª—è–π—Ç–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–µ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π. –î–∞–≤–∞–π—Ç–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º—å—é–Ω–∏—Ç–∏, –∞ –Ω–µ —Ä—É–≥–∞—Ç—å—Å—è.'
        '\n<b> ¬∑ </b>–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É ‚Äî —Å—Ä–∞–∑—É —É–¥–∞–ª–∏—Ç—Å—è –±–æ—Ç–æ–º.'
        '\n<b> ¬∑ </b>–ú—ã –ª—é–±–∏–º –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã ‚Äî –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å—Å—ã–ª–∫–∏ –∏ –¥–µ–ª–∏—Ç—å—Å—è –∏–º–∏ —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.'
        '\n<b> ¬∑ </b>–ù–µ–ª—å–∑—è —Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥–∏, —Ç–æ–≤–∞—Ä—ã, —Å–∫–ª–∞–¥—á–∏–Ω—ã, –¥–∞–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∏ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —Ç–µ–º–µ –≤—ë—Ä—Å—Ç–∫–∏ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.'
        '\n<b> ¬∑ </b>–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç, —Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —É–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ—é –º—ã—Å–ª—å –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –Ω–∏–∫—Ç–æ –Ω–µ –ª—é–±–∏—Ç —Ñ–ª—É–¥.'
        '\n<b> ¬∑ </b>–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–±–µ—Ä–µ–≥–∏—Ç–µ –¥–ª—è –¥—Ä—É–∑–µ–π ‚Äî –ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º.', parse_mode='html')

@dp.message_handler(content_types=["new_chat_members"])
async def newuser(message: types.Message):
    await bot.send_chat_action(message.chat.id, 'typing')
    time.sleep(1)
    if message.from_user.username is None:
        await bot.send_message(
            message.chat.id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å –≤ —á–∞—Ç–µ @' + message.new_chat_members.username + ', —è <b>–±–æ—Ç</b>, –∏ –≤–æ—Ç <u>–ø—Ä–∞–≤–∏–ª–∞</u> —á–∞—Ç–∞: \n'
            '<b> ¬∑ </b>–ù–µ –æ—Å–∫–æ—Ä–±–ª—è–π—Ç–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–µ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π. –î–∞–≤–∞–π—Ç–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º—å—é–Ω–∏—Ç–∏, –∞ –Ω–µ —Ä—É–≥–∞—Ç—å—Å—è.'
            '\n<b> ¬∑ </b>–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É ‚Äî —Å—Ä–∞–∑—É —É–¥–∞–ª–∏—Ç—Å—è –±–æ—Ç–æ–º.'
            '\n<b> ¬∑ </b>–ú—ã –ª—é–±–∏–º –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã ‚Äî –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å—Å—ã–ª–∫–∏ –∏ –¥–µ–ª–∏—Ç—å—Å—è –∏–º–∏ —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.'
            '\n<b> ¬∑ </b>–ù–µ–ª—å–∑—è —Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥–∏, —Ç–æ–≤–∞—Ä—ã, —Å–∫–ª–∞–¥—á–∏–Ω—ã, –¥–∞–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∏ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —Ç–µ–º–µ –≤—ë—Ä—Å—Ç–∫–∏ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.'
            '\n<b> ¬∑ </b>–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç, —Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —É–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ—é –º—ã—Å–ª—å –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –Ω–∏–∫—Ç–æ –Ω–µ –ª—é–±–∏—Ç —Ñ–ª—É–¥.'
            '\n<b> ¬∑ </b>–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–±–µ—Ä–µ–≥–∏—Ç–µ –¥–ª—è –¥—Ä—É–∑–µ–π ‚Äî –ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º.', parse_mode='html')
    else:
        await message.reply(
            '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å –≤ —á–∞—Ç–µ, —è <b>–±–æ—Ç</b>, –∏ –≤–æ—Ç <u>–ø—Ä–∞–≤–∏–ª–∞</u> —á–∞—Ç–∞: \n'
            '<b> ¬∑ </b>–ù–µ –æ—Å–∫–æ—Ä–±–ª—è–π—Ç–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–µ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π. –î–∞–≤–∞–π—Ç–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º—å—é–Ω–∏—Ç–∏, –∞ –Ω–µ —Ä—É–≥–∞—Ç—å—Å—è.'
            '\n<b> ¬∑ </b>–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É ‚Äî —Å—Ä–∞–∑—É —É–¥–∞–ª–∏—Ç—Å—è –±–æ—Ç–æ–º.'
            '\n<b> ¬∑ </b>–ú—ã –ª—é–±–∏–º –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã ‚Äî –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å—Å—ã–ª–∫–∏ –∏ –¥–µ–ª–∏—Ç—å—Å—è –∏–º–∏ —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.'
            '\n<b> ¬∑ </b>–ù–µ–ª—å–∑—è —Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥–∏, —Ç–æ–≤–∞—Ä—ã, —Å–∫–ª–∞–¥—á–∏–Ω—ã, –¥–∞–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∏ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —Ç–µ–º–µ –≤—ë—Ä—Å—Ç–∫–∏ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.'
            '\n<b> ¬∑ </b>–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç, —Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —É–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ—é –º—ã—Å–ª—å –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –Ω–∏–∫—Ç–æ –Ω–µ –ª—é–±–∏—Ç —Ñ–ª—É–¥.'
            '\n<b> ¬∑ </b>–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–±–µ—Ä–µ–≥–∏—Ç–µ –¥–ª—è –¥—Ä—É–∑–µ–π ‚Äî –ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º.', parse_mode='html')

@dp.message_handler(content_types=["left_chat_member"])
async def leftuser(message: types.Message):
    await bot.send_chat_action(message.chat.id, 'typing')
    time.sleep(1)
    await bot.send_message(
        message.chat.id, '–≠—Ö... –º–∏–Ω—É—Å –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–∞—Ç–∞...', parse_mode='html')

@dp.message_handler(content_types=["text"])
async def check(message: types.Message):
    global allwords, matwords
    try:
        if message.text == '@myCensorBot':
            sti = open('dist/1.tgs', 'rb')
            await bot.send_sticker(message.chat.id, sti)
            await bot.send_message(message.chat.id, '–Ø!')
        else:
            with open("dist/mats.txt", encoding='utf-8') as openfile:
                mat = False
                text = message.text.lower()
                ntext = text.translate(str.maketrans('', '', string.punctuation)).lower()
                allwords += 1
                for line in openfile:
                    mat = False
                    for part in line.split():
                        part = part.rstrip(',')
                        if part == 'endmats':
                            if mat == True:
                                await bot.delete_message(
                                    message.chat.id, message.message_id)
                                await bot.send_message(
                                    message.chat.id, 'ü§ê @' + message.from_user.username + '\n' + text)
                                matwords += 1
                            break
                        for word in ntext.split():
                            if word == part:
                                text = text.replace(part, '. . .', 1000)
                                mat = True
        
    except BaseException as e:
        await bot.send_message(message.chat.id, '–£–ø—Å, –æ—à–∏–±–∫–∞...\n<code>' + e + '</code>', parse_mode='html')


@dp.message_handler(content_types=['document'])
async def file_handler(message: types.Message):
    global filescan
    try:
        url_file_scan = 'https://www.virustotal.com/vtapi/v2/file/scan'
        params = dict(apikey='<api_key>')
        file_upload_id = await bot.get_file(message.document.file_id)
        url_upload_file = "https://api.telegram.org/file/bot{}/{}".format(bot_token, file_upload_id.file_path)
        recvfile = requests.get(url_upload_file)
        files = dict(file=(recvfile.content))
        response_file_scan = requests.post(url_file_scan, files=files, params=params)
        if response_file_scan.json()['response_code'] == 1:
            await bot.send_message(message.chat.id, "<a href='" + response_file_scan.json()['permalink'] + "'>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</a> –æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ–º —Ñ–∞–π–ª–µ", parse_mode='html')
        else:
            await bot.send_message(message.chat.id, response_file_scan.json()['verbose_msg'])
        filescan += 1
    except BaseException as e:
        await bot.send_message(message.chat.id, '–£–ø—Å, –æ—à–∏–±–∫–∞...\n<code>' + e + '</code>', parse_mode='html')

#
if __name__ == "__main__":
    executor.start_polling(dp)
